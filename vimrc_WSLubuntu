" .vimrc
"
"===============================================================================
echo "--------------------------------------------------------------------------"
echo "                          NVIM .vimrc for WSL                          "
echo "--------------------------------------------------------------------------"
"
let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.vim/autoload/plug.vim')
if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -flo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
    :execute 'source '.fnameescape(vim_plug_path)
endif


call plug#begin('~/.vim/plugged')

Plug 'SirVer/ultisnips'
Plug 'Valloric/YouCompleteMe'
Plug 'Yggdroot/indentline'
Plug 'arthurxavierx/vim-unicoder'
Plug 'brooth/far.vim'
Plug 'christoomey/vim-system-copy'
Plug 'christoomey/vim-tmux-navigator'
Plug 'elzr/vim-json'
Plug 'ervandew/supertab'                    " supertab context sensitive completion
Plug 'fisadev/dragvisuals.vim'              " dragvisuals
Plug 'fs111/pydoc.vim'
Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'jlanzarotta/bufexplorer'              " buffer explorer: usage : <leader>be
Plug 'jsfaint/gen_tags.vim'     " ctags / gtags
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'                     " fuzzy file find
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-github-dashboard'
Plug 'klen/python-mode'
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'mattn/emmet-vim'
Plug 'mileszs/ack.vim'                      " ack for grepping
Plug 'moll/vim-node'
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': 'yarn install'}
Plug 'nvie/vim-flake8'
Plug 'pangloss/vim-javascript'
Plug 'prabirshrestha/async.vim'             " use with vim-lsp
Plug 'prabirshrestha/vim-lsp'               " language server protocol
Plug 'python-mode/python-mode', { 'branch': 'develop' }
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'rstacruz/sparkup'                     " parser for a condensed HTML format
Plug 'scrooloose/nerdcommenter'             " nerd commenter - use <leader>cc
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'
Plug 'soramugi/auto-ctags.vim'              " ctags
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'                    " window manager; usage: - to jump buffer
Plug 'universal-ctags/ctags'
Plug 'vim-latex/vim-latex'
Plug 'vim-perl/vim-perl6'                   " perl6 support
Plug 'vim-scripts/AutoComplPop'             " autocomplete for perl
Plug 'vim-scripts/FuzzyFinder'              " fuzzy finder
Plug 'vim-scripts/L9'                       " fuzzy finder requires this L9 library!
Plug 'vim-scripts/ZoomWin'                  " zoom in/out of windows - toggle between wins
Plug 'vim-scripts/indentpython.vim'
Plug 'vim-scripts/perl-support.vim'         " perl-support
Plug 'w0rp/ale'
Plug 'wolfgangmehner/perl-support'          " perl-support
Plug 'wsdjeg/FlyGrep.vim'                   " grep on the fly
Plug 'yanick/Neovim-RPC'                    " neovim RPC
Plug 'zchee/deoplete-jedi'

if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
"======== colorscheme plugins
Plug 'NLKNguyen/papercolor-theme'           " papercolor
Plug 'altercation/vim-colors-solarized'
Plug 'crusoexia/vim-dracula'
Plug 'dracula/vim', { 'as': 'dracula' }     " dracula
Plug 'hzchirs/vim-material'                 " vim-material theme
Plug 'iCyMind/NeoSolarized'                 " NeoSolarized
Plug 'joshdick/onedark.vim'                 " onedark  * best
Plug 'jpo/vim-railscasts-theme'
Plug 'kaicataldo/material.vim'              " vim material theme
Plug 'lifepillar/vim-solarized8'
Plug 'mhartington/oceanic-next'
Plug 'morhetz/gruvbox'                      " gruvbox
Plug 'nanotech/jellybeans.vim'              " jellybeans
Plug 'rainux/vim-desert-warm-256'
Plug 'tomasr/molokai'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'zeis/vim-kolor'

call plug#end()

"================== GENERAL SETTINGS ==================
" basics
filetype on
filetype plugin indent on
syntax on
syntax enable

"========= autoload vimrc source
autocmd! bufwritepost .vimrc source %


set nocompatible
set completeopt=longest

"========= various settings
set autoindent
set autoread
set autowrite
set backspace=indent,eol,start
set browsedir=current
set complete+=k
set hidden
set nowrap
set ruler
set showcmd
set splitbelow
set splitright
set visualbell

set history=1000
set nobackup
set noswapfile
set nowritebackup
set undolevels=1000

"==============
let mapleader=","
set path+=**
" searching
set hlsearch
set incsearch
set ignorecase
set smartcase
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor\ --hidden\ --ignore\ .git
endif

" wildmenu settings
set wildmenu
set wildignorecase
set wildmode=full
set wildignore=*.o,*.obj,*~
set wildignore=*.swp,*.tmp
set wildignore=*.mp3,*.mp4,*.mkv
set wildignore=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore=*.pdf,*.doc,*.docx,*.ppt,*.pptx
set wildignore=*.rar,*.zip,*.tar,*.tar.gz,*.tar.xz

set clipboard+=unnamedplus
set cursorline
set expandtab
set number
set numberwidth=5
set relativenumber
set scroll=10
set shiftwidth=4
set softtabstop=4
set tabstop=4

highlight ColorColumn ctermbg=DarkGrey
set colorcolumn=81

highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
highlight MatchParen ctermbg=blue guibg=lightyellow

" better copy & paste
set pastetoggle=<F2>

" mouse and backspace
set bs=2
if has('mouse')
    set mouse=a
endif
set tw=79
set nowrap
set fo-=+

" enable folding
set foldmethod=indent
set foldlevel=99
" enable folding with spacebar
nnoremap <space> za


"====== shady characters for trailing spaces
set list listchars=tab:>~,nbsp:_,trail:Â·

autocmd FileWritePre * call TrimWhiteSpace()
autocmd FileAppendPre * call TrimWhiteSpace()
autocmd FilterWritePre * call TrimWhiteSpace()
autocmd BufWritePre * call TrimWhiteSpace()

map <F2> :call TrimWhiteSpace()<CR>
map! <F2> :call TrimWhiteSpace()<CR>

"======= automatically remove all trailing whitespace
autocmd FileType c,cpp,js,pl,p6,py,for,f,f90,f95 autocmd BufWritePre <buffer> %s/\s\+$//e

vmap <C-c> "+y

"======== open help files in new tab
augroup HelpInTabs
    autocmd!
    autocmd BufEnter *.txt call HelpInNewTab()
augroup END

function! HelpInNewTab()
    if &buftype == 'help'
        execute "normal \<C-W>T"
    endif
endfunction

"============== no simultaneous edits on files
augroup NoSimultaneousEdits
    autocmd!
    autocmd SwapExists * let v:swapchoice = 'o'
    autocmd SwapExists * echomsg ErrorMsg
    autocmd SwapExists * echo 'Duplicate edit session (readonly)'
    autocmd SwapExists * echohl None
augroup END

"============= find digraphs for accentuate
inoremap <expr> <C-K> ShowDigraphs()

function! ShowDigraphs ()
    digraphs
    call getchar()
    return "\<C-K>"
endfunction

" =================== Highlight matches when jumping to next ==============
nnoremap <silent> n n:call HLNext(0.4)<cr>
nnoremap <silent> N N:call HLNext(0.4)<cr>

function! HLNext(blinktime)
    set invcursorline
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    set invcursorline
    redraw
endfunction

"======= removes trailing spaces
function! TrimWhiteSpace()
    %s/\s*$//
    ''
endfunction

"===============================================================================
"== mappings

" Fuzzy Finder matching mapping
map <leader>ff :FufCoverageFile<CR>

" redraw screen - press <F9> and it redraws the window in normal mode
nmap <F9>  :redr!<CR>

"mirror.vim shortcuts
command! SyncSave w | MirrorPush
map <leader>ss :SyncSave<CR>

" bind nohl
noremap <C-n> :nohl<CR>
vnoremap <C-n> :nohl<CR>
inoremap <C-n> :nohl<CR>

" quicksave
noremap <C-Z> :update<CR>
vnoremap <C-Z> <C-C> :update<CR>
inoremap <C-Z> <C-O> :update<CR>

noremap <Leader>e :quit<CR>
noremap <Leader>E :qa!<CR>

" bind Ctrl+movement keys
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <C-h> <C-w>h

"====== map sort function to a key
vnoremap <Leader>s :sort<CR>
vnoremap <Leader>n :sort f<CR>

"====== easier moving of code blocks
vnoremap < <gv
vnoremap > >gv

"===== path to python
let g:python3_host_prog='/home/seneryilmaz/anaconda3/bin/python3'
let g:python_host_prog='/usr/bin/python2'

let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
let python_highlight_all=1
let g:SimplyFold_docstring_preview=1

"====== DragVisuals
vmap <expr> <S-M-LEFT> DVB_Drag('left')
vmap <expr> <S-M-RIGHT> DVB_Drag('right')
vmap <expr> <S-M-DOWN> DVB_Drag('down')
vmap <expr> <S-M-UP> DVB_Drag('up')
" mapping to duplicate block
vmap <expr> D DVB_Duplicate()

"===============================================================================
" Plugin Settings parameters
"
"====== ale completion
set completeopt=menu,menuone,preview,noselect,noinsert

let g:ale_completion_enabled = 1
let g:ale_python_autopep8_executable = 'autopep8'
let g:ale_python_flake8_executable = 'python3'
let g:ale_python_flake8_options = '-:wam flake8'
let g:ale_linters = {
    \ 'sh': ['language_server'],
    \ }

let g:LanguageClient_serverCommands = {
    \ 'sh': ['bash-language-server', 'start'],
    \ 'fortran': ['fortls', '--symbol_skip_mem', '--incrmental_sync', '--autocomplete_no_prefix'],
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'iris'],
    \ 'javascript': ['usr/local/bin/javascript-typescript-stdio'],
    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
    \ 'python': ['/usr/local/bin/pyls'],
    \ }

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definiton()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" Nerd Commenter settings
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1

"======= ultisnips python
let g:UltiSnipsUsePythonVersion = 3

"======= airline theme settings
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'

" Airline settings
" do not show error/warning section
let g:airline_section_error = ""
let g:airline_section_warning = ""
let g:airline_powerline_fonts = 0
let g:airline#extensions#whitespace#enabled = 0

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'

let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

"python with virtualenv support
python << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

" check perl code with :make
autocmd FileType perl set makeprg=perl\ -c\ %\ $*
autocmd FileType perl set errorformat=%f:%l:%m
autocmd FileType perl set autowrite

"make tab in v mode ident code
vmap <tab> >gv
vmap <s-tab> <gv

" comment/uncomment blocks of code (in vmode)
vmap _c :s/^/#/gi<Enter>
vmap _C :s/^#//gi<Enter>



" visual mode for commenter
vnoremap <silent> <C-k> :s#^#\##<cr>:noh<cr>
vnoremap <silent> <C-u> :s#^\###<cr>:noh<cr>

"============ tag bar opens right for mappings and functions defined
nnoremap <silent> <F4> :TagbarToggle<CR>

" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#jedi#show_docstring = 1
let g:deoplete#enable_ignore_case = 1
let g:deoplete#enable_smart_case = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
let g:tagbar_autofocus = 1

" material theme settings
let g:material_theme_style = 'dark' " | 'palenight' | 'default'
let g:material_terminal_italics = 1
let g:airline_theme = 'material'

let g:material_style = 'oceanic'

" italics
let g:onedark_terminal_italics = 1
let g:onedark_underlined = 1
let g:onedark_bold = 1

let g:dracula_italic = 1
let g:dracula_underlined = 1
let g:dracula_bold = 1
let g:dracula_undrcurl = 1
let g:dracula_inverse = 1
let g:dracula_colorterm = 1

let g:neosolarized_italic = 1
let g:neosolarized_underlined = 1
let g:neosolarized_bold = 1
let g:neosolarized_undrcurl = 1
let g:neosolarized_inverse = 1
let g:neosolarized_colorterm = 1

let g:solarized_term_italics = 1
let g:solarized_underlined = 1
let g:solarized_bold = 1

if (empty($TMUX))
    if (has("nvim"))
        let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif
    if (has("termguicolors"))
        set termguicolors
    endif
endif

" set terminal 256 colors
set termguicolors

"===============================================================================
"" select colorscheme

set background=dark
"colorscheme PaperColor
"colorscheme desert-warm-256
"colorscheme dracula
"colorscheme gruvbox
"colorscheme jellybeans
"colorscheme kolor
"colorscheme material
"colorscheme molokai
"colorscheme oceanic-next
"colorscheme onedark
"colorscheme railscasts
"colorscheme solarized8
"colorscheme vim-colors-solarized
"colorscheme vim-dracula
"colorscheme vim-material
colorscheme NeoSolarized
